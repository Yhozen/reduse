{"version":3,"sources":["redux.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","rootReducer","combineReducers","firebaseReducer","firestoreReducer","store","createStore","rrfProps","config","userProfile","dispatch","createFirestoreInstance","formatValue","value","toFixed","qrOptions","type","color","light","dark","cashierRef","collection","doc","App","useFirestore","useState","counter","setCounter","useFirestoreConnect","cashiers","useSelector","state","ordered","cashier","console","log","subtotal","products","values","reduce","totalCalories","meal","price","discount","discounts","credits","useEffect","canvas","document","getElementById","QRCode","toCanvas","id","error","style","className","map","product","margin","duration","marginTop","marginBottom","onChange","event","target","onClick","a","async","get","data","update","Boolean","window","location","hostname","match","disableYellowBox","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d07cb73a.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore' // <- needed if using firestore\nimport { createStore, combineReducers } from 'redux'\nimport { firebaseReducer } from 'react-redux-firebase'\nimport { createFirestoreInstance, firestoreReducer } from 'redux-firestore' // <- needed if using firestore\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyCVECOJby11DV-1JZS8z7lIzmUqJgQz_Mk',\n  authDomain: 'reduse-demo.firebaseapp.com',\n  databaseURL: 'https://reduse-demo.firebaseio.com',\n  projectId: 'reduse-demo',\n  storageBucket: 'reduse-demo.appspot.com',\n  messagingSenderId: '489647742796',\n  appId: '1:489647742796:web:e7f804d0500d30be6bb9e9',\n  measurementId: 'G-5F8Y162510'\n}\n// Initialize Firebase\nconst app = firebase.initializeApp(firebaseConfig)\nfirebase.firestore()\n// Initialize other services on firebase instance\n// firebase.firestore() // <- needed if using firestore\n// firebase.functions() // <- needed if using httpsCallable\n\n// Add firebase to reducers\nconst rootReducer = combineReducers({\n  firebase: firebaseReducer,\n  firestore: firestoreReducer // <- needed if using firestore\n})\n\n// Create store with reducers and initial state\nconst initialState = {}\nconst store = createStore(rootReducer, initialState)\n\nconst rrfConfig = {\n  userProfile: 'users'\n}\n\nconst rrfProps = {\n  firebase: app,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n\nexport { rrfProps }\nexport default store\n","import React, { useEffect, useState } from 'react'\nimport QRCode from 'qrcode'\nimport './App.css'\nimport { useFirestoreConnect, useFirestore } from 'react-redux-firebase'\nimport { values, map } from 'ramda'\n\nimport { useSelector } from 'react-redux'\nimport AnimatedNumber from 'animated-number-react'\n\nconst formatValue = value => value.toFixed(0)\nconst qrOptions = {\n  type: 'svg',\n  color: { light: '#FFFFFF00', dark: '#361d38EE' }\n}\nconst populates = [\n  { child: 'products', root: 'products' } // replace owner with user object\n]\n\nconst cashierRef = { collection: 'cashier', doc: 'HKNi2VPkzmgeH30Cum0X' }\nfunction App() {\n  const firestore = useFirestore()\n  const [counter, setCounter] = useState(0)\n  useFirestoreConnect([\n    cashierRef // or 'todos'\n  ])\n  const cashiers = useSelector(state => state.firestore.ordered.cashier)\n  const cashier = cashiers && cashiers[0]\n  console.log(cashier)\n  const subtotal =\n    cashier && cashier.products\n      ? values(cashier.products).reduce(\n          (totalCalories, meal) => totalCalories + meal.price,\n          0\n        )\n      : 0\n\n  const discount =\n    cashier && cashier.discounts\n      ? values(cashier.discounts).reduce(\n          (totalCalories, meal) => totalCalories + meal.credits * 1000,\n          0\n        )\n      : 0\n\n  useEffect(() => {\n    var canvas = document.getElementById('qr')\n\n    QRCode.toCanvas(canvas, cashier && cashier.id, qrOptions, error => {\n      canvas.style = 'height: 28vmin; width: 28vmin;'\n    })\n  }, [cashier])\n\n  const handleSubmit = async () => {\n    const doc = await firestore.get(cashierRef)\n    const product = (await firestore.get(`products/${counter}`)).data()\n    const data = doc.data()\n    const products = data.products || {}\n    if (product) {\n      await firestore.update(cashierRef, {\n        products: { ...products, [counter]: product }\n      })\n    }\n    setCounter(state => state + 5)\n  }\n  const handleChange = event => {\n    setCounter(event.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"flex-2\">\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          {cashier &&\n            cashier.products &&\n            values(\n              map(product => {\n                return (\n                  <h3 style={{ margin: 5 }}>\n                    <AnimatedNumber\n                      value={product.price}\n                      formatValue={formatValue}\n                      duration={200}\n                    />\n                  </h3>\n                )\n              }, cashier.products)\n            )}\n          <p style={{ marginTop: 20, marginBottom: 2 }}>Subtotal</p>\n          <h2 style={{ margin: 5 }}>\n            <AnimatedNumber\n              value={subtotal}\n              formatValue={formatValue}\n              duration={200}\n            />\n          </h2>\n          <p style={{ marginTop: 20, marginBottom: 2 }}>Descuentos REDUSE</p>\n          {cashier &&\n            cashier.discounts &&\n            values(\n              map(product => {\n                return (\n                  <h3 style={{ margin: 5 }}>\n                    <AnimatedNumber\n                      value={product.credits * 1000}\n                      formatValue={formatValue}\n                      duration={200}\n                    />\n                  </h3>\n                )\n              }, cashier.discounts)\n            )}\n          <p style={{ marginTop: 20, marginBottom: 2 }}>TOTAL</p>\n\n          <h1 style={{ margin: 5 }}>\n            <AnimatedNumber\n              value={subtotal - discount}\n              formatValue={formatValue}\n              duration={200}\n            />\n          </h1>\n\n          <input type=\"text\" value={counter} onChange={handleChange} />\n          <button onClick={handleSubmit}>wea</button>\n        </div>\n        <div className=\"flex-1\">\n          <canvas id=\"qr\" />\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase'\n\nimport store, { rrfProps } from './redux'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconsole.disableYellowBox = true\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}